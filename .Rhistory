rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(dplyr)
## Loading datasets & transforming to .Rdata for efficiency reasons ##
setwd("/home/david/Documents/datasets/profitability/")
# existing = read.csv("existing.csv", sep = ",")
# new = read.csv("new.csv", sep = ",")
# save(existing, file = "existing.Rdata")
# save(new, file = "new.Rdata")
load(file = "existing.Rdata")
load(file = "new.Rdata")
glimpse(existing)
names(existing) = c("type", "id", "price", "stars_5", "stars_4", "stars_3", "stars_2", "stars_1", "pos_service", "neg_service", "would_recommend", "bestSeller_rank", "weight", "depth", "width", "height", "profit_margin", "volume")
existing$id = factor(existing$id)
existing$bestSeller_rank = factor(existing$bestSeller_rank)
existing$surface = (existing$depth^2)+(existing$height^2)+(existing$width^2)
glimpse(existing)
summary(existing)
if (length(unique(existing$id)) == nrow(existing)) {
print(paste("There are", length(unique(existing$id)), "unique ID values out of", nrow(existing), "observations."))
} else { (print("CHECK: There is at least 1 repeated ID value in the 80 observations."))
}
barplot(table(existing$bestSeller_rank), main = "Amount of products\nby rank", col = "purple", xlab = "Rank", ylab = "Number of products")
sum(is.na(existing$bestSeller_rank))
par(mfrow = c(2,2))
hist(existing$price, col = "purple", xlab = "Price €", main = "Histogram of Price")
hist(existing$would_recommend, col = "purple", xlab = "Would recommend?\n0 No, 1 Yes", main = "Histogram of user recommend")
hist(existing$pos_service, col = "purple", xlab = "Positive review", main = "Histogram of positive service")
hist(existing$neg_service, col = "purple", xlab = "Negative review", main = "Histogram of negative service")
par(mfrow = c(1,1))
boxplot(existing$volume, col = "purple", varwidth = F)
existing %>%
filter(volume >= 2500)
existing %>%
filter(volume >= 2500) %>%
select(type)
existing %>%
filter(volume >= 2500)
existing %>%
filter(volume >= 2500) %>%
select(type, volume)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(dplyr, corrplot, PerformanceAnalytics, rpart, rpart.plot, Metrics, knitr, randomForest, caret, e1071)
## Loading datasets & transforming to .Rdata for efficiency reasons ##
setwd("C:/Projects/Profitability/datasets/")
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(dplyr, corrplot, PerformanceAnalytics, rpart, rpart.plot, Metrics, knitr, randomForest, caret, e1071)
## Loading datasets & transforming to .Rdata for efficiency reasons ##
setwd("Z:/Projects/Profitability/datasets/")
# existing = read.csv("existing.csv", sep = ",")
# new = read.csv("new.csv", sep = ",")
# save(existing, file = "existing.Rdata")
# save(new, file = "new.Rdata")
load(file = "existing.Rdata")
load(file = "new.Rdata")
glimpse(existing)
names(existing) = c("type", "id", "price", "stars_5", "stars_4", "stars_3", "stars_2", "stars_1", "pos_service", "neg_service", "would_recommend", "bestSeller_rank", "weight", "depth", "width", "height", "profit_margin", "volume")
existing$id = factor(existing$id)
existing$bestSeller_rank = factor(existing$bestSeller_rank)
existing$surface = (existing$depth^2)+(existing$height^2)+(existing$width^2)
glimpse(existing)
summary(existing)
if (length(unique(existing$id)) == nrow(existing)) {
print(paste("There are", length(unique(existing$id)), "unique ID values out of", nrow(existing), "observations."))
} else { (print("CHECK: There is at least 1 repeated ID value in the 80 observations."))
}
barplot(table(existing$bestSeller_rank), main = "Amount of products\nby rank", col = "purple", xlab = "Rank", ylab = "Number of products")
sum(is.na(existing$bestSeller_rank))
par(mfrow = c(2,2))
hist(existing$price, col = "purple", xlab = "Price â¬", main = "Histogram of Price")
hist(existing$would_recommend, col = "purple", xlab = "Would recommend?\n0 No, 1 Yes", main = "Histogram of user recommend")
hist(existing$pos_service, col = "purple", xlab = "Positive review", main = "Histogram of positive service")
hist(existing$neg_service, col = "purple", xlab = "Negative review", main = "Histogram of negative service")
par(mfrow = c(1,1))
boxplot(existing$volume, col = "purple", varwidth = F)
existing %>%
filter(volume >= 2500) %>%
select(type, volume) %>%
knitr::kable()
mat = as.matrix(existing[, -c(1:2, 12)])
corr_mat = cor(mat)
corrplot(corr = corr_mat, diag = F)
mat_stars = as.matrix(existing[,c(4:8, 18)])
star_corr_mat = cor(mat_stars)
corrplot(corr = star_corr_mat, diag = F, method = "number")
existing = existing[, -c(2, 4, 13:16)] #Removing attributes that are not useful
existing$reviews_43 = existing$stars_4 + existing$stars_3
existing$reviews_21 = existing$stars_2 + existing$stars_1
existing$reviews_4321 = existing$stars_4 + existing$stars_3 + existing$stars_2 + existing$stars_1
existing$total_service_reviews = existing$pos_service + existing$neg_service
existing$total_positive_reviews = existing$stars_4 + existing$stars_3 + existing$pos_service
existing$total_negative_reviews = existing$stars_2 + existing$stars_1 + existing$neg_service
names(existing)
mat_stars = as.matrix(existing[, -c(1, 10)])
star_corr_mat = cor(mat_stars)
corrplot(corr = star_corr_mat, diag = F, method = "number", number.cex = 0.5)
RF_all = rpart(formula = volume~., data = existing)
summary_RF_all = summary(RF_all)
RF_some = rpart(formula = volume~ price + stars_4 + pos_service + neg_service + would_recommend + reviews_21, data = existing)
summary_RF_some = summary(RF_some)
summary_RF_some$variable.importance
rpart.plot(RF_some, type = 5, shadow.col = "black")
summary_RF_all$variable.importance
rpart.plot(RF_all, type = 5, shadow.col = "black")
existing_2attributes = existing %>%
select(stars_4, pos_service, volume)
set.seed(123)
sample = sample.int(n = nrow(existing_2attributes),
size = floor(0.80*nrow(existing_2attributes)),
replace = F)
train = existing_2attributes[sample, ]
test = existing_2attributes[-sample, ]
lm_fit = lm(formula = volume~., data = train)
summary(lm_fit)
lm_pred = predict(object = lm_fit, newdata = test)
lm_pred
rf_fit = randomForest(volume~., data = train)
rf_pred = predict(object = rf_fit, newdata = test)
knn_fit = caret::knnreg(formula = volume~., data = train, k = 3)
knn_pred = predict(object = knn_fit, newdata = test)
svm_fit = svm(formula = volume~., data = train)
svm_pred = predict(object = svm_fit, newdata = test)
head(train)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(dplyr, corrplot, PerformanceAnalytics, rpart, rpart.plot, Metrics, knitr, randomForest, caret, e1071)
## Loading datasets & transforming to .Rdata for efficiency reasons ##
setwd("Z:/Projects/Profitability/datasets/")
# existing = read.csv("existing.csv", sep = ",")
# new = read.csv("new.csv", sep = ",")
# save(existing, file = "existing.Rdata")
# save(new, file = "new.Rdata")
load(file = "existing.Rdata")
load(file = "new.Rdata")
glimpse(existing)
names(existing) = c("type", "id", "price", "stars_5", "stars_4", "stars_3", "stars_2", "stars_1", "pos_service", "neg_service", "would_recommend", "bestSeller_rank", "weight", "depth", "width", "height", "profit_margin", "volume")
existing$id = factor(existing$id)
existing$bestSeller_rank = factor(existing$bestSeller_rank)
existing$surface = (existing$depth^2)+(existing$height^2)+(existing$width^2)
glimpse(existing)
summary(existing)
if (length(unique(existing$id)) == nrow(existing)) {
print(paste("There are", length(unique(existing$id)), "unique ID values out of", nrow(existing), "observations."))
} else { (print("CHECK: There is at least 1 repeated ID value in the 80 observations."))
}
barplot(table(existing$bestSeller_rank), main = "Amount of products\nby rank", col = "purple", xlab = "Rank", ylab = "Number of products")
sum(is.na(existing$bestSeller_rank))
par(mfrow = c(2,2))
hist(existing$price, col = "purple", xlab = "Price â¬", main = "Histogram of Price")
hist(existing$would_recommend, col = "purple", xlab = "Would recommend?\n0 No, 1 Yes", main = "Histogram of user recommend")
hist(existing$pos_service, col = "purple", xlab = "Positive review", main = "Histogram of positive service")
hist(existing$neg_service, col = "purple", xlab = "Negative review", main = "Histogram of negative service")
par(mfrow = c(1,1))
boxplot(existing$volume, col = "purple", varwidth = F)
existing %>%
filter(volume >= 2500) %>%
select(type, volume) %>%
knitr::kable()
mat = as.matrix(existing[, -c(1:2, 12)])
corr_mat = cor(mat)
corrplot(corr = corr_mat, diag = F)
mat_stars = as.matrix(existing[,c(4:8, 18)])
star_corr_mat = cor(mat_stars)
corrplot(corr = star_corr_mat, diag = F, method = "number")
existing = existing[, -c(2, 4, 13:16)] #Removing attributes that are not useful
existing$reviews_43 = existing$stars_4 + existing$stars_3
existing$reviews_21 = existing$stars_2 + existing$stars_1
existing$reviews_4321 = existing$stars_4 + existing$stars_3 + existing$stars_2 + existing$stars_1
existing$total_service_reviews = existing$pos_service + existing$neg_service
existing$total_positive_reviews = existing$stars_4 + existing$stars_3 + existing$pos_service
existing$total_negative_reviews = existing$stars_2 + existing$stars_1 + existing$neg_service
names(existing)
mat_stars = as.matrix(existing[, -c(1, 10)])
star_corr_mat = cor(mat_stars)
corrplot(corr = star_corr_mat, diag = F, method = "number", number.cex = 0.5)
RF_all = rpart(formula = volume~., data = existing)
summary_RF_all = summary(RF_all)
RF_some = rpart(formula = volume~ price + stars_4 + pos_service + neg_service + would_recommend + reviews_21, data = existing)
summary_RF_some = summary(RF_some)
summary_RF_some$variable.importance
rpart.plot(RF_some, type = 5, shadow.col = "black")
summary_RF_all$variable.importance
rpart.plot(RF_all, type = 5, shadow.col = "black")
existing_2attributes = existing %>%
select(stars_4, pos_service, volume)
set.seed(123)
sample = sample.int(n = nrow(existing_2attributes),
size = floor(0.80*nrow(existing_2attributes)),
replace = F)
train = existing_2attributes[sample, ]
test = existing_2attributes[-sample, ]
lm_fit = lm(formula = volume~., data = train)
summary(lm_fit)
lm_pred = predict(object = lm_fit, newdata = test)
lm_pred
rf_fit = randomForest(volume~., data = train)
rf_pred = predict(object = rf_fit, newdata = test)
knn_fit = caret::knnreg(formula = volume~., data = train, k = 3)
knn_pred = predict(object = knn_fit, newdata = test)
svm_fit = svm(formula = volume~., data = train)
svm_pred = predict(object = svm_fit, newdata = test)
error.matrix = matrix(nrow = 4, ncol = 3,
dimnames = list(c("LM", "RF", "KNN", "SVM"),
c("RMSE", "MAE", "MDAE")))
kable(error.matrix)
# rmse(actual = test$volume, predicted = lm_pred)
# mae(actual = test$volume, predicted = lm_pred)
# mdae(actual = test$volume, predicted = lm_pred)
new_2attributes = new %>%
select(X.4.Star.Reviews., X.Positive.Service.Review.) %>%
transmute(stars_4 = as.integer(X.4.Star.Reviews.),
pos_service = as.integer(X.Positive.Service.Review.))
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(dplyr, corrplot, PerformanceAnalytics, rpart, rpart.plot, Metrics, knitr, randomForest, caret, e1071)
## Loading datasets & transforming to .Rdata for efficiency reasons ##
setwd("Z:/Projects/Profitability/datasets/")
# existing = read.csv("existing.csv", sep = ",")
# new = read.csv("new.csv", sep = ",")
# save(existing, file = "existing.Rdata")
# save(new, file = "new.Rdata")
load(file = "existing.Rdata")
load(file = "new.Rdata")
glimpse(existing)
names(existing) = c("type", "id", "price", "stars_5", "stars_4", "stars_3", "stars_2", "stars_1", "pos_service", "neg_service", "would_recommend", "bestSeller_rank", "weight", "depth", "width", "height", "profit_margin", "volume")
existing$id = factor(existing$id)
existing$bestSeller_rank = factor(existing$bestSeller_rank)
existing$surface = (existing$depth^2)+(existing$height^2)+(existing$width^2)
glimpse(existing)
summary(existing)
if (length(unique(existing$id)) == nrow(existing)) {
print(paste("There are", length(unique(existing$id)), "unique ID values out of", nrow(existing), "observations."))
} else { (print("CHECK: There is at least 1 repeated ID value in the 80 observations."))
}
barplot(table(existing$bestSeller_rank), main = "Amount of products\nby rank", col = "purple", xlab = "Rank", ylab = "Number of products")
sum(is.na(existing$bestSeller_rank))
par(mfrow = c(2,2))
hist(existing$price, col = "purple", xlab = "Price â¬", main = "Histogram of Price")
hist(existing$would_recommend, col = "purple", xlab = "Would recommend?\n0 No, 1 Yes", main = "Histogram of user recommend")
hist(existing$pos_service, col = "purple", xlab = "Positive review", main = "Histogram of positive service")
hist(existing$neg_service, col = "purple", xlab = "Negative review", main = "Histogram of negative service")
par(mfrow = c(1,1))
boxplot(existing$volume, col = "purple", varwidth = F)
existing %>%
filter(volume >= 2500) %>%
select(type, volume) %>%
knitr::kable()
mat = as.matrix(existing[, -c(1:2, 12)])
corr_mat = cor(mat)
corrplot(corr = corr_mat, diag = F)
mat_stars = as.matrix(existing[,c(4:8, 18)])
star_corr_mat = cor(mat_stars)
corrplot(corr = star_corr_mat, diag = F, method = "number")
existing = existing[, -c(2, 4, 13:16)] #Removing attributes that are not useful
existing$reviews_43 = existing$stars_4 + existing$stars_3
existing$reviews_21 = existing$stars_2 + existing$stars_1
existing$reviews_4321 = existing$stars_4 + existing$stars_3 + existing$stars_2 + existing$stars_1
existing$total_service_reviews = existing$pos_service + existing$neg_service
existing$total_positive_reviews = existing$stars_4 + existing$stars_3 + existing$pos_service
existing$total_negative_reviews = existing$stars_2 + existing$stars_1 + existing$neg_service
names(existing)
mat_stars = as.matrix(existing[, -c(1, 10)])
star_corr_mat = cor(mat_stars)
corrplot(corr = star_corr_mat, diag = F, method = "number", number.cex = 0.5)
RF_all = rpart(formula = volume~., data = existing)
summary_RF_all = summary(RF_all)
RF_some = rpart(formula = volume~ price + stars_4 + pos_service + neg_service + would_recommend + reviews_21, data = existing)
summary_RF_some = summary(RF_some)
summary_RF_some$variable.importance
rpart.plot(RF_some, type = 5, shadow.col = "black")
summary_RF_all$variable.importance
rpart.plot(RF_all, type = 5, shadow.col = "black")
existing_2attributes = existing %>%
select(stars_4, pos_service, volume)
set.seed(123)
sample = sample.int(n = nrow(existing_2attributes),
size = floor(0.80*nrow(existing_2attributes)),
replace = F)
train = existing_2attributes[sample, ]
test = existing_2attributes[-sample, ]
lm_fit = lm(formula = volume~., data = train)
summary(lm_fit)
lm_pred = predict(object = lm_fit, newdata = test)
lm_pred
rf_fit = randomForest(volume~., data = train)
rf_pred = predict(object = rf_fit, newdata = test)
knn_fit = caret::knnreg(formula = volume~., data = train, k = 3)
knn_pred = predict(object = knn_fit, newdata = test)
svm_fit = svm(formula = volume~., data = train)
svm_pred = predict(object = svm_fit, newdata = test)
rmse(actual = test$volume, predicted = lm_pred)
kable(error.matrix)
error.matrix = matrix(nrow = 4, ncol = 3,
dimnames = list(c("LM", "RF", "KNN", "SVM"),
c("RMSE", "MAE", "MDAE")))
kable(error.matrix)
error.matrix[1,1]
error.matrix[,1]
error.matrix = matrix(nrow = 4, ncol = 3,
dimnames = list(c("LM", "RF", "KNN", "SVM"),
c("RMSE", "MAE", "MDAE")))
error.matrix[1,1] = rmse(actual = test$volume, predicted = lm_pred)
error.matrix[2,1] = rmse(actual = test$volume, predicted = rf_pred)
error.matrix[3,1] = rmse(actual = test$volume, predicted = knn_pred)
error.matrix[4,1] = rmse(actual = test$volume, predicted = svm_pred)
# mae(actual = test$volume, predicted = lm_pred)
# mdae(actual = test$volume, predicted = lm_pred)
kable(error.matrix)
error.matrix = matrix(nrow = 4, ncol = 3,
dimnames = list(c("LM", "RF", "KNN", "SVM"),
c("RMSE", "MAE", "MDAE")))
error.matrix[1,1] = rmse(actual = test$volume, predicted = lm_pred)
error.matrix[2,1] = rmse(actual = test$volume, predicted = rf_pred)
error.matrix[3,1] = rmse(actual = test$volume, predicted = knn_pred)
error.matrix[4,1] = rmse(actual = test$volume, predicted = svm_pred)
error.matrix[1,2] = mae(actual = test$volume, predicted = lm_pred)
error.matrix[2,2] = mae(actual = test$volume, predicted = rf_pred)
error.matrix[3,2] = mae(actual = test$volume, predicted = knn_pred)
error.matrix[4,2] = mae(actual = test$volume, predicted = svm_pred)
error.matrix[1,3] = mdae(actual = test$volume, predicted = lm_pred)
error.matrix[2,3] = mdae(actual = test$volume, predicted = rf_pred)
error.matrix[3,3] = mdae(actual = test$volume, predicted = knn_pred)
error.matrix[4,3] = mdae(actual = test$volume, predicted = svm_pred)
kable(error.matrix)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(dplyr, corrplot, PerformanceAnalytics, rpart, rpart.plot, Metrics, knitr, randomForest, caret, e1071)
## Loading datasets & transforming to .Rdata for efficiency reasons ##
setwd("Z:/Projects/Profitability/datasets/")
# existing = read.csv("existing.csv", sep = ",")
# new = read.csv("new.csv", sep = ",")
# save(existing, file = "existing.Rdata")
# save(new, file = "new.Rdata")
load(file = "existing.Rdata")
load(file = "new.Rdata")
glimpse(existing)
names(existing) = c("type", "id", "price", "stars_5", "stars_4", "stars_3", "stars_2", "stars_1", "pos_service", "neg_service", "would_recommend", "bestSeller_rank", "weight", "depth", "width", "height", "profit_margin", "volume")
existing$id = factor(existing$id)
existing$bestSeller_rank = factor(existing$bestSeller_rank)
existing$surface = (existing$depth^2)+(existing$height^2)+(existing$width^2)
glimpse(existing)
summary(existing)
if (length(unique(existing$id)) == nrow(existing)) {
print(paste("There are", length(unique(existing$id)), "unique ID values out of", nrow(existing), "observations."))
} else { (print("CHECK: There is at least 1 repeated ID value in the 80 observations."))
}
barplot(table(existing$bestSeller_rank), main = "Amount of products\nby rank", col = "purple", xlab = "Rank", ylab = "Number of products")
sum(is.na(existing$bestSeller_rank))
par(mfrow = c(2,2))
hist(existing$price, col = "purple", xlab = "Price â¬", main = "Histogram of Price")
hist(existing$would_recommend, col = "purple", xlab = "Would recommend?\n0 No, 1 Yes", main = "Histogram of user recommend")
hist(existing$pos_service, col = "purple", xlab = "Positive review", main = "Histogram of positive service")
hist(existing$neg_service, col = "purple", xlab = "Negative review", main = "Histogram of negative service")
par(mfrow = c(1,1))
boxplot(existing$volume, col = "purple", varwidth = F)
existing %>%
filter(volume >= 2500) %>%
select(type, volume) %>%
knitr::kable()
mat = as.matrix(existing[, -c(1:2, 12)])
corr_mat = cor(mat)
corrplot(corr = corr_mat, diag = F)
mat_stars = as.matrix(existing[,c(4:8, 18)])
star_corr_mat = cor(mat_stars)
corrplot(corr = star_corr_mat, diag = F, method = "number")
existing = existing[, -c(2, 4, 13:16)] #Removing attributes that are not useful
existing$reviews_43 = existing$stars_4 + existing$stars_3
existing$reviews_21 = existing$stars_2 + existing$stars_1
existing$reviews_4321 = existing$stars_4 + existing$stars_3 + existing$stars_2 + existing$stars_1
existing$total_service_reviews = existing$pos_service + existing$neg_service
existing$total_positive_reviews = existing$stars_4 + existing$stars_3 + existing$pos_service
existing$total_negative_reviews = existing$stars_2 + existing$stars_1 + existing$neg_service
names(existing)
mat_stars = as.matrix(existing[, -c(1, 10)])
star_corr_mat = cor(mat_stars)
corrplot(corr = star_corr_mat, diag = F, method = "number", number.cex = 0.5)
RF_all = rpart(formula = volume~., data = existing)
summary_RF_all = summary(RF_all)
RF_some = rpart(formula = volume~ price + stars_4 + pos_service + neg_service + would_recommend + reviews_21, data = existing)
summary_RF_some = summary(RF_some)
summary_RF_some$variable.importance
rpart.plot(RF_some, type = 5, shadow.col = "black")
summary_RF_all$variable.importance
rpart.plot(RF_all, type = 5, shadow.col = "black")
existing_2attributes = existing %>%
select(stars_4, pos_service, volume)
set.seed(123)
sample = sample.int(n = nrow(existing_2attributes),
size = floor(0.80*nrow(existing_2attributes)),
replace = F)
train = existing_2attributes[sample, ]
test = existing_2attributes[-sample, ]
lm_fit = lm(formula = volume~., data = train)
summary(lm_fit)
lm_pred = predict(object = lm_fit, newdata = test)
lm_pred
rf_fit = randomForest(volume~., data = train)
rf_pred = predict(object = rf_fit, newdata = test)
knn_fit = caret::knnreg(formula = volume~., data = train, k = 3)
knn_pred = predict(object = knn_fit, newdata = test)
svm_fit = svm(formula = volume~., data = train)
svm_pred = predict(object = svm_fit, newdata = test)
error.matrix = matrix(nrow = 4, ncol = 3,
dimnames = list(c("LM", "RF", "KNN", "SVM"),
c("RMSE", "MAE", "MDAE")))
error.matrix[1,1] = rmse(actual = test$volume, predicted = lm_pred)
error.matrix[2,1] = rmse(actual = test$volume, predicted = rf_pred)
error.matrix[3,1] = rmse(actual = test$volume, predicted = knn_pred)
error.matrix[4,1] = rmse(actual = test$volume, predicted = svm_pred)
error.matrix[1,2] = mae(actual = test$volume, predicted = lm_pred)
error.matrix[2,2] = mae(actual = test$volume, predicted = rf_pred)
error.matrix[3,2] = mae(actual = test$volume, predicted = knn_pred)
error.matrix[4,2] = mae(actual = test$volume, predicted = svm_pred)
error.matrix[1,3] = mdae(actual = test$volume, predicted = lm_pred)
error.matrix[2,3] = mdae(actual = test$volume, predicted = rf_pred)
error.matrix[3,3] = mdae(actual = test$volume, predicted = knn_pred)
error.matrix[4,3] = mdae(actual = test$volume, predicted = svm_pred)
kable(error.matrix)
new_2attributes = new %>%
select(X.4.Star.Reviews., X.Positive.Service.Review.) %>%
transmute(stars_4 = as.integer(X.4.Star.Reviews.),
pos_service = as.integer(X.Positive.Service.Review.))
new
View(test)
View(train)
